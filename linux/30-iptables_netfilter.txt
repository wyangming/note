一般端口号的范围是0-65535

Linux：网络防火墙
  netfilter：Frame 是内核中的一个过滤框架，网络过滤器
  iptables：生成防火墙规则、并能加其附加在netfilter上真正实现数据报文过滤的工具。NAT、mangle等规则生成工具

网络：IP报文首部，TCP报文首部

防火墙：硬件、软件：规则(匹配标准，处理办法)

防火墙可以理解是一个Framework(框架)：
  默认规则：
    开放：堵
	关闭：通

规则：匹配标准
  IP：SIP(源IP)，DIP(目标IP)
  TCP：SPORT(源端口),DPORT(目标端口),     SYN=1,RST=0,ACK=0(三次握手的第一次)； SYN=1,ACK=1,FIN=0,RST=0(第二次握手)；ACK=1,SYN=0,RST=0,FYN=0(ESTABLISHED 第三次握手即已建立链接)
  UDP：SPORT(源端口),DPORT(目标端口)
  ICMP：icmp-type
规则是自上尔下

数据报文过滤就是防火墙

hook function：钩子函数
  prerouting：路由之前，刚刚到本机，还没有做路由
  input：进，到本机来
  output：出，本机出去
  forward：转发，本机转发
  postrouting：路由之后，马上就要由本机发出去，就要离开本机
每一个钩子函数就是一外链

规则链：
  PREROUTING
  INPUT
  FORWARD
  OUTPUT
  POSTROUTING

filter(过滤)：表
  INPUT
  OUTPUT
  FORWARD

nat(地址转换)：表
  PREROUTING
  OUTPUT
  POSTROUTING

mangle(修改报文首部即：拆开、修改、封装)：表
  PREROUTING
  INPUT
  FORWARD
  OUTPUT
  POSTROUTING

raw(数据的原始格式)：
  PREROUTING
  OUTPUT

iptables(同四个表五个链组成)：

可以使用自定义链，但只在被调用时才能发挥作用，而且如果没有自定义链中的任何规则匹配，还应该有返回机制。
用户可以删除自定义的空链，默认链无法删除
每个规则都有两个内置的计数器
  一个记录被匹配的报文个数
  一个记录被匹配的报文大小之和

规则：匹配标准，处理动作

iptables [-t TABLE] COMMAND CHAIN [num] 匹配标准 -j 处理办法

匹配标准：
  通用匹配：自身完成
    -s,--src：指定源地址或者源ip
	-d,--dst：指定目标地址或者目标ip
	-p {tcp|udp|icmp}：指定协议
	-i INTERFACE：指定数据报文流入的接口，从那个网卡进来的
	  可用于定义标准的链：PREROUTING,INPUT,FORWARD
	-o INTERFACE：指定数据报文流出的接口，从那个网卡出去的
	  可用于定义标准的链：OUTPUT,POSTROUTING,FORWARD
  扩展匹配：依赖模块完成
    隐含扩展：不用特别指明由那个模块进行扩展，因为此时使用-p {tcp|udp|icmp}
	  -p tcp
	    --sport PORT[-PORT]：源端口
		--dport PORT[-PORT]：目标端口
		--tcp-flag mask comp：只检查mask指定的标示位，是逗号分隔的标志位列表；comp表示此列表中出现的标志位必须为1，comp中没有出现，而mask中出现的，必须为0
		  --tcp-flag SYN,FIN,ACK,RST SYN,ACK   #标识位FIN,RST为0,SYN,ACK为1
		  --tcp-flag SYN,FIN,ACK,RST SYN   #只有SYN为1其他三个都为0，也就是三次握手的第一次握手
		--syn：专门匹配三次握手的第一次握手
	  -p icmp
	    --icmp-type
		  0: echo-reply
		  8: echo-request
	  -p udp
	    --sport
		--dport
	显示扩展：必须指明由那个模块进行的扩展，在iptables中使用-m选项可完成此功能。使用额外的匹配机制
	  -m EXTESTION --spe-opt
	    state：状态扩展
		  结合ip_conntrack追踪会话的状态
		    四种状态：
			  NEW：新连接请求
			  ESTABLTSHED：已建立的连接
			  INVALID：非法连接
			  RELATED：相关联的
		  -m state --state NEW -j ACCEPT    #放地NEW状态的报文
		  -m state --state NEW,ESTABLISHED -j ACCEPT   #多个状态用逗号隔开
		multiport：离散多端口匹配扩展，最多支持15个
		  --source-ports
		  --destination-ports
		  --ports
		    -m multiport --destination-ports 21,22,80 -j ACCEPT
		iprange：ip的范围，只可以匹配ipv4地址
		  --src-range
		  --dst-range
		connlimit：链接数限制
		  --connlimit-above n：达到n个链接
		    iptables -I INPUT -d 192.168.1.252 -p tcp --dport 80 -m connlimit ! --connlimit-above 2 -j ACCEPT #限定链接数不等于两个，也就是小于两个
			iptables -I INPUT -d 192.168.1.252 -p tcp --dport 80 -m connlimit ! --connlimit-above 2 -j DROP
		limit：不控制最大上限，只控制单位时间内的流量上限与一次性的流量上线
		  --limit RATE(是一个速率，表示每分钟多少个，每秒钟多少个)
		  --limit-burst #N(流量的上线，每秒中可以进来多少个)
		    iptables -I INPUT -d 192.168.1.139 -p icmp --icmp-type 8 -m limit --limit 5/minute --limit-burst 6 -j ACCEPT #限定ping请求每分钟5个，一次性最多只有6个
			iptables -I INPUT -d 192.168.1.139 -p tcp --dport 22 -m limit --limit 1/minute --limit-burst 1 -j ACCEPT #限制tcp协议每分钟只有1个链接且一次性最多1个
		string：根据字符串匹配内容
		  --algo {bm|kmp}：指定的算法，两种算法效果与效率基本一样
		  --string "STRING"：支持正则表达式
		    iptables -I INPUT -d 192.168.1.139 -m string --algo kmp --string "h7n9" -j REJECT #当请求的地址内容包含有h7n9时就不让请求
			iptables -I OUTPUT -s 192.168.1.139 -m string --algo kmp --string "h7n9" -j REJECT #当请求访问的内容包含有h7n9时就不让请求

条件取反：!，-s ! 192.168.1.101

-j TARGET(处理办法)
  LOG：日志
    --log-level level：日志级别
	--log-prefix prefix：日志的前缀
	--log-tcp-sequence：记录tcp的序列号
	--log-tcp-options：记录tcp报文的选项
	--log-ip-options：记录ip的选项
	--log-uid：记录请求用户的uid
	  iptables -I -d 192.168.1.139 -p icmp --icmp-type 8 -j LOG --log-prefix "--firewall log for icmp-- " 在ping这台机子的日志前加上前缀--firewall log for icmp--一般日志会跟速率限定一块用，避免产生过大的io影响性能
  ACCEPT：通过、接受、允许
  DROP：拒绝，一般用DROP不用REJECT，除非在特定的测试情况下
  REJECT：拒绝

例子：
iptables -t filter -A INPUT -s 172.16.0.0/16 -j DROP  #不让来自于172.16.0.0这个网段的访问本机
iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.100.7 -j DROP  #本机有个ip地址172.16.100.7不让来自于172.16.0.0这个网段来访问

命令：
  管理规则命令
    -A：附加一条规则，添加在链的尾部
	-I CHAIN [num]：插入一条规则，插入为对应CHAIN上的第num条；如果省略了num则插入为第一条
	-D CHAIN [num]：删除指定链中的第num条规则；可以指定匹配条件进行删除
	-R CHAIN [num]：替换指定的规则；也可以指定匹配条件进行修改
  管理链命令
    -F [CHAIN]：flush，清空指定规则链，如果省略CHAIN，则可以实现删除对应表中的所有链
	-P CHAIN [ACCEPT|DROP]：设定指定链的默认策略；
	-N：自定义一个新的空链
	-X：删除一个自定义的空链，如果想删除非空的则需要先用-F清空规则链儿；
	-Z：置零指定链中所有规则的计数器；
	-E：重命名自定义的链；
  查看类：
    -L：显示指定表中的所有规则；会将主机的ip反解为主机名，端口所解为服务名
	  -n：以数字格式显示主机地址和端口号，通常跟-L一块用，当没有设置dns时反解析为主机地址很慢
	  -v：显示详细信息
	  -vv：显示更详细信息
	  -x：显示计数器的精确值
	  --line-numbers：显示规则号码

动作(TARGET)：
  ACCEPT：放行
  DROP：丢弃
  REJECT：拒绝，会返回一条信息
  DNAT：目标地址转换
  SNAT：源地址转换
  REDIRECT：端口重定向
  MASQUERADE：地址伪装
  LOG：日志
  MARK：打标记

保存规则
  service iptables save
    /etc/sysconfig/iptables
  iptables-save > /etc/sysconfig/iptables.20160611
    想要下次重启的时候对iptables.20160611文件里的配置有效需要执行以下命令
	iptables-restore < /etc/sysconfig/iptables.20160611

iptables不是服务，但有服务脚本；服务脚本的主要作用在于管理保存的规则
  装载及移除iptables/netfilter相关的内核模块；
    iptables_nat, iptables_filter, iptables_mangle, iptables_raw, ip_nat, ip_conntrack
lsmod  可以检查启动的模块
ipstate  #查看当前的链接信息
sysctl -w net.ipv4.ip_conntrack_max=65536   #修改默认的链接数
/pro/sys/net/ipv4/netfilter/这个目录下修改关于ipv4下的网络连接信息
以上这些值如果想永久有效把值写在/etc/sysctl.conf当中去


例子：
iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.100.7 -p tcp --dport 22 -j ACCEPT
iptables -t filter -A OUTPUT -s 172.16.100.7 -d 172.16.0.0/16 -p tcp --sport 22 -j ACCEPT
放行172.16.0.0网段访问172.16.100.7:22这个端口，进出都放行
iptables -P INPUT DROP     #修改INPUT默认策略为不放行
iptables -P OUTPUT DROP    #修改OUTPUT默认策略为不放行
iptables -P FORWARD DROP   #修改FORWARD默认策略为不放行
iptables -I INPUT -d 192.168.1.252 -p tcp --dport 80 -j ACCEPT
iptables -I OUTPUT -s 192.168.1.252 -p tcp --sport 80 -j ACCEPT
开放访问的80端口，当来源是所有的机子时可以不指定来源地址
iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -i lo -j ACCEPT
iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -o lo -j ACCEPT
放行自己对自己的限制只对127.0.0.1有效，其他地址无效
iptables -A INPUT -d 192.168.1.252 -p icmp --icmp-type 0 -j ACCEPT
iptables -A OUTPUT -s 192.168.1.252 -p icmp --icmp-type 8 -j ACCEPT
允许自己ping别人
iptables -A INPUT -d 192.168.1.252 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -s 192.168.1.252 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT放行22号端口iptables -A INPUT -d 192.168.1.252 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPTiptables -A OUTPUT -s 192.168.1.252 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT
放行80端口
iptables -A INPUT -d 192.168.1.252 -p icmp --icmp-type 8 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -s 192.168.1.252 -p icmp --icmp-type 0 -m state --state ESTABLISHED -j ACCEPT
放行让别人可以ping自己
iptables -I OUTPUT -s 192.168.1.252 -m state --state ESTABLISHED -j ACCEPT
只要状态是ESTABLISHED本机出去的都放行
iptables -I INPUT -d 192.168.1.255 -m state --state NEW,ESTABLISHED -j ACCEPT
只要状态是NEW,ESTABLISHED的链接进来都放行

先装载ip_conntrack_ftp和ip_nat_ftp模块
只需要编辑以下文件
vim /etc/sysconfig/iptables-config
把以下内容写上或者修改
IPTABLES_MODULES="ip_nat_ftp ip_conntrack_ftp"  #如果有多个模块用空隔隔开
iptables -A INPUT -d 192.168.1.252 -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -d 192.168.1.255 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A INPUT -d 192.168.1.252 -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
开放ftp状态

iptables -A INPUT -d 192.168.1.252 -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -d 192.168.1.252 -p tcp -m multiport --destination-ports 21,22,80 -m state --state NEW -j ACCEPT
经简以上所有开放端口的写法
iptables -A INPUT -p tcp -m iprange --src-range 192.168.1.101-192.168.1.121 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
地址范围放行


iptables -N clean_in  #新建一个链名叫clean_in
iptables -A clean_in -d 255.255.255.255 -p icmp -j DROP  #在clean_in链里添加一条规则
iptables -A clean_in -d 172.16.255.255 -p icmp -j DROP  #在clean_in链里添加一条规则
iptables -A clean-in -p tcp --tcp-flags All ALL -j DROP  #在clean_in链里添加一条规则
iptables -A clean-in -p tcp --tcp-flags ALL NONE -j DROP  #在clean_in链里添加一条规则
iptables -A clean-in -d 172.16.100.7 -j RETURN  #如果一条也没有匹配到返回到主链上去
iptables -I INPUT -j clean_in  #clean_in被主链调用

iptables中想删除一个规则链，要先清楚引用，现清楚里面的规则才可以删除


iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-abve3 -j DROP  #当ssh拉链同一个ip地址链接超过三次就拒绝
iptables -I INPUT -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH  #最近对服务器服务发起请求的ip地址记录下来
iptables -I INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j DROP  #最近对服务器服务发起请求的ip地址记录下来，如果在300秒内，用户的请求超过3个，加进ssh的模板中并拒绝5分钟
  利用connlimit模块将单IP的并发设置为3；会误杀使用NAT上网的用户，可以根据实际情况增大该值；
  利用recent和state模块限制单IP在300s内只能与本机建立3个新连接。初限制5分钟后即可恢复访问
  --set 记录数据包的来源，如果IP已经存在将更新已经存在的条目
  --update 是指每次建立连接都更新列表
  --seconds 必须与--rcheck或者--update同时使用
  --hitcount 必须与--rcheck或者--update同时使用
  iptables的记录：/proc/net/ipt_recent/SSH

iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --name SSH --second 300 --hitcount3 -j LOG --log-prefix "SSH Attack"  #跟上面的是一样的




NAT：Network Address Translation
如果想打开服务器的转发功能得把/proc/sys/net/ipv4/ip_forward改为上就可以实现转发功能了
echo 1 > /proc/sys/net/ipv4/ip_forward即可
若想永久有效编辑/etc/sysctl.conf把net.ipv4.ip_forward=1 然后用sysctl -p让生效

route del -net 0.0.0.0 #删除默认路由
route add default gw 172.16.100.7 #添加默认路由

DNAT：目标地址转换
SNAT：源地址转换(PORTROUTING，OUTPUT)

iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
把INPUT与OUTPUT全部设置为同意
iptables -F #清空所有链的规则

利用iptables进行地址转换
 -j SNAT
   --to-source：转换为那个地址做为源地址，也可以指定一个网络地址段
     iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j SNAT --to-source 172.16.100.7 #当接受到来自于192.168.10.0/24网段的报文时都做源地址转换，转换为172.16.100.7转发出去
	 iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 123.2.3.2 #基中123.2.3.2是公网地址，192.168.0.0/24是内网的网段地址，这样内网都可以上网了
 -j DNAT
  --to-destination IP[:port]
 -j MASQUERADE：只人外网地址是动态获取的时候才用这个选项，一般不用效率很低
 PNAT：Port NAT 端口转换

 iptables -A FORWARD -s 192.168.0.0/24 -p icmp -j REJECT #不允许192.168.0.0网段ping任何服务器
 iptables -A FORWARD -m state --state ESTABLISHED -j ACCEPT #放行已经建立的链接
 iptables -A FORWARD -s 192.168.0.0/24 -p tcp --dport 80 -m state --state NEW -j ACCEPT #放行新建立的链接
 iptables -A FORWARD -s 192.168.0.0/24 -p icmp --icmp-type 8 -m state --state NEW -j ACCEPT #放行ping服务
 iptables -A FORWARD -s 192.168.0.0/24 -p tcp --dport 21 -m state --state NEW -j ACCEPT #开放ftp链接
 iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT #可以理解为放行ftp的数据链接
要使用ESTABLISHED,RELATED功能请确保在/etc/sysconfig/iptables-config中IPTABLES_MODULES="ip_nat_ftp ip_conntrack_ftp" 也就是说这两个模块已经被内核装载，可用lsmod | grep ftp命令查看，否则是无法使用的

目标地址转换
iptables -t nat -A PREROUTING -d 172.16.100.7 -p tcp --dport 80 DNAT --to-destination 192.168.10.22 #如果用户访问的是172.16.100.7的80端口，把转换到192.168.10.22上的80端口
iptables -t nat -A PREROUTING -d 172.16.100.7 -p tcp --dport 80 DNAT --to-destination 192.168.10.22:8080 #如果用户访问的是172.16.100.7的80端口，把转换到192.168.10.22上的8080端口
iptables -A FORWARD -m string --algo kmp --string "h7n9" -j DROP #在FORWARD链上如果内容有h7n9就不让访问


一般情况下不把命令直接保存到iptables的配置文件里，而是写一个脚本动态去配置，例如：
#!/bin/bash
#
ipt=/usr/sbin/iptables
einterface=eth1
iinterface=eth0

eip=172.16.100.7
iip=192.168.10.6

$ipt -t nat -F
$ipt -t filter -F
$ipt -t mangle -F

$ipt -N clean_up
$ipt -A clean_up -d 255.255.255.255 -p icmp -j DROP
$ipt -A clean_up -j RETURN

$iptables -A

………………


